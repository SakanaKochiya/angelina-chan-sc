"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SauceNao = void 0;
const url_1 = require("url");
const https_1 = require("https");
const errors_1 = require("./errors");
class SauceNao {
    constructor(dynamicParams) {
        this.url = new url_1.URL('https://saucenao.com/search.php');
        if (dynamicParams) {
            Object.keys(dynamicParams).forEach(value => this.url.searchParams.set(value, dynamicParams[value].toString()));
        }
        this.url.searchParams.set('output_type', '2');
    }
    find(staticParams) {
        let body = '';
        let temp = new url_1.URL('', this.url);
        if (typeof staticParams === "string") {
            temp.searchParams.set('url', staticParams);
        }
        else {
            Object.keys(staticParams).forEach(value => temp.searchParams.set(value, staticParams[value].toString()));
        }
        const options = {
            method: 'GET',
            host: this.url.hostname,
            path: this.url.pathname + temp.search
        };
        return new Promise(promise => {
            const req = (0, https_1.request)(options, (res) => {
                res.body = '';
                res.setEncoding('utf-8');
                res.on('data', (chunk) => res.body += chunk);
                res.on('end', () => {
                    const json = JSON.parse(res.body);
                    switch (json.header.status) {
                        case -3: {
                            throw new errors_1.ClientError("You need an Image!");
                        }
                        case -2: {
                            throw new errors_1.ClientError("Search Rate Too High.");
                        }
                        case -1: {
                            throw new errors_1.ClientError("The anonymous account type does not permit API usage.");
                        }
                        case 0: {
                            promise(json);
                            break;
                        }
                        default:
                            if (json.header.status > 0) {
                                throw new errors_1.UnknownError(`Unknown server error. Code: ${json.header.status}. Message: ${json.header.message}. If you know what the error is, please report`);
                            }
                            throw new errors_1.UnknownError(`Unknown client error. Code: ${json.header.status}. Message: ${json.header.message}. If you know what the error is, please report`);
                    }
                });
            });
            req.end(body === '' ? null : body);
        });
    }
}
exports.SauceNao = SauceNao;
//# sourceMappingURL=index.js.map